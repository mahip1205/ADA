#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Comparator function for sorting edges based on weight
bool compareEdges(Edge a, Edge b) {
    return a.weight < b.weight;
}

// Find operation with path compression
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Union by rank
void unionSets(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Kruskal's algorithm to find MST
void kruskal(vector<Edge>& edges, int V) {
    vector<Edge> result;  // Stores the MST edges
    sort(edges.begin(), edges.end(), compareEdges);

    Subset* subsets = new Subset[V];
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    int edgeCount = 0, i = 0;
    while (edgeCount < V - 1 && i < edges.size()) {
        Edge nextEdge = edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        if (x != y) {
            result.push_back(nextEdge);
            unionSets(subsets, x, y);
            edgeCount++;
        }
    }

    cout << "Edges in MST:\n";
    for (auto e : result)
        cout << e.src << " -- " << e.dest << " == " << e.weight << endl;
    
    delete[] subsets;
}

int main() {
    int V = 6; // Number of vertices
    vector<Edge> edges = {
        {0, 1, 4}, {0, 2, 4}, {1, 2, 2}, {1, 3, 6}, 
        {2, 3, 8}, {3, 4, 9}, {4, 5, 10}, {3, 5, 4}
    };

    kruskal(edges, V);

    return 0;
}
